#!/usr/bin/env python3
"""
Script test v√† xu·∫•t n·ªôi dung PDF ra file txt
H·ªó tr·ª£ c·∫£ PDF th√¥ng th∆∞·ªùng v√† PDF scan (OCR)
"""

import os
import sys
import time
from datetime import datetime
from pathlib import Path

# Th√™m src v√†o Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from utils.pdf_processing.pdf_extractor import PDFExtractor
from utils.pdf_processing.text_normalizer import VietnameseTextNormalizer
from utils.pdf_processing.ocr_processor import OCRProcessor
from utils.pdf_processing.document_processor import DocumentProcessor

def create_output_directory():
    """T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥"""
    output_dir = Path("docs/output")
    output_dir.mkdir(parents=True, exist_ok=True)
    return output_dir

def extract_pdf_content_standard(pdf_path):
    """Tr√≠ch xu·∫•t n·ªôi dung PDF b·∫±ng ph∆∞∆°ng ph√°p th√¥ng th∆∞·ªùng"""
    print(f"üìÑ ƒêang tr√≠ch xu·∫•t PDF th√¥ng th∆∞·ªùng: {pdf_path}")
    
    try:
        with PDFExtractor(pdf_path) as extractor:
            # Tr√≠ch xu·∫•t text
            text = extractor.extract_text()
            
            # Tr√≠ch xu·∫•t metadata
            metadata = extractor.extract_text_with_metadata()
            
            # Tr√≠ch xu·∫•t text theo trang
            pages_text = []
            for page_num in range(len(extractor.doc)):
                page_text = extractor.extract_text_by_page(page_num)
                pages_text.append({
                    'page': page_num + 1,
                    'text': page_text,
                    'char_count': len(page_text)
                })
            
            return {
                'method': 'standard',
                'success': True,
                'total_text': text,
                'total_chars': len(text),
                'metadata': metadata,
                'pages': pages_text,
                'page_count': len(pages_text)
            }
            
    except Exception as e:
        return {
            'method': 'standard',
            'success': False,
            'error': str(e),
            'total_chars': 0
        }

def extract_pdf_content_ocr(pdf_path):
    """Tr√≠ch xu·∫•t n·ªôi dung PDF b·∫±ng OCR"""
    print(f"üîç ƒêang tr√≠ch xu·∫•t PDF b·∫±ng OCR: {pdf_path}")
    
    try:
        # Kh·ªüi t·∫°o OCR processor
        ocr = OCRProcessor(
            tesseract_cmd='/opt/homebrew/bin/tesseract',
            lang='vie+eng'
        )
        
        # Convert PDF pages to images v√† OCR
        import fitz  # PyMuPDF
        import tempfile
        import cv2
        import numpy as np
        
        doc = fitz.open(pdf_path)
        
        all_text = ""
        pages_text = []
        
        with tempfile.TemporaryDirectory() as temp_dir:
            for page_num in range(len(doc)):
                print(f"   ƒêang x·ª≠ l√Ω trang {page_num + 1}/{len(doc)}...")
                
                # Convert page to image
                page = doc[page_num]
                mat = fitz.Matrix(2.0, 2.0)  # Zoom 2x for better OCR
                pix = page.get_pixmap(matrix=mat)
                
                # Save to temporary file
                temp_image_path = os.path.join(temp_dir, f"page_{page_num + 1}.png")
                pix.save(temp_image_path)
                
                # Read image with OpenCV
                img = cv2.imread(temp_image_path)
                if img is None:
                    print(f"      ‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh trang {page_num + 1}")
                    continue
                
                # OCR
                start_time = time.time()
                page_text = ocr.extract_text_from_image(temp_image_path)
                ocr_time = time.time() - start_time
                
                all_text += page_text + "\n\n"
                pages_text.append({
                    'page': page_num + 1,
                    'text': page_text,
                    'char_count': len(page_text),
                    'ocr_time': round(ocr_time, 2)
                })
                
                print(f"      ‚úì Trang {page_num + 1}: {len(page_text)} k√Ω t·ª± ({ocr_time:.2f}s)")
        
        doc.close()
        
        return {
            'method': 'ocr',
            'success': True,
            'total_text': all_text.strip(),
            'total_chars': len(all_text.strip()),
            'pages': pages_text,
            'page_count': len(pages_text)
        }
        
    except Exception as e:
        return {
            'method': 'ocr',
            'success': False,
            'error': str(e),
            'total_chars': 0
        }

def normalize_text(text):
    """Chu·∫©n h√≥a text ti·∫øng Vi·ªát"""
    try:
        normalizer = VietnameseTextNormalizer()
        normalized = normalizer.clean_and_normalize(text, expand_abbreviations=True, is_legal_document=True)
        return normalized
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói chu·∫©n h√≥a text: {e}")
        return text

def save_to_txt_file(content, filename, output_dir):
    """L∆∞u n·ªôi dung ra file txt"""
    filepath = output_dir / filename
    
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        file_size = filepath.stat().st_size
        print(f"‚úÖ ƒê√£ l∆∞u: {filepath} ({file_size:,} bytes)")
        return str(filepath)
        
    except Exception as e:
        print(f"‚ùå L·ªói l∆∞u file {filepath}: {e}")
        return None

def format_extraction_report(result, normalized_text=None):
    """T·∫°o b√°o c√°o chi ti·∫øt v·ªÅ qu√° tr√¨nh tr√≠ch xu·∫•t"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    report = f"""
================================================================================
B√ÅO C√ÅO TR√çCH XU·∫§T PDF
================================================================================
Th·ªùi gian: {timestamp}
Ph∆∞∆°ng ph√°p: {result['method'].upper()}
Tr·∫°ng th√°i: {'TH√ÄNH C√îNG' if result['success'] else 'TH·∫§T B·∫†I'}

"""
    
    if result['success']:
        report += f"""TH·ªêNG K√ä T·ªîNG QUAN:
- T·ªïng s·ªë k√Ω t·ª±: {result['total_chars']:,}
- S·ªë trang: {result['page_count']}
- Trung b√¨nh k√Ω t·ª±/trang: {result['total_chars'] // result['page_count']:,}

CHI TI·∫æT THEO TRANG:
"""
        
        for page_info in result['pages']:
            report += f"- Trang {page_info['page']}: {page_info['char_count']:,} k√Ω t·ª±"
            if 'ocr_time' in page_info:
                report += f" (OCR: {page_info['ocr_time']}s)"
            report += "\n"
        
        if normalized_text:
            report += f"\nSAU CHU·∫®N H√ìA:\n- S·ªë k√Ω t·ª±: {len(normalized_text):,}\n"
        
        report += f"""
================================================================================
N·ªòI DUNG TR√çCH XU·∫§T:
================================================================================

{result['total_text']}

"""
        
        if normalized_text and normalized_text != result['total_text']:
            report += f"""
================================================================================
N·ªòI DUNG SAU CHU·∫®N H√ìA:
================================================================================

{normalized_text}

"""
    else:
        report += f"L·ªñI: {result['error']}\n"
    
    report += "================================================================================\n"
    return report

def main():
    """H√†m ch√≠nh"""
    print("üöÄ B·∫ÆT ƒê·∫¶U TEST V√Ä XU·∫§T N·ªòI DUNG PDF RA FILE TXT")
    print("=" * 80)
    
    # T·∫°o th∆∞ m·ª•c output
    output_dir = create_output_directory()
    print(f"üìÅ Th∆∞ m·ª•c output: {output_dir}")
    
    # File PDF ƒë·ªÉ test
    pdf_file = "docs/pdf_input/BA 311.2025.HS.ST.pdf"
    
    if not os.path.exists(pdf_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file PDF: {pdf_file}")
        return
    
    file_size = os.path.getsize(pdf_file) / 1024  # KB
    print(f"üìÑ File PDF: {pdf_file} ({file_size:.1f} KB)")
    print()
    
    # Test 1: PDF extraction th√¥ng th∆∞·ªùng
    print("üîÑ TEST 1: PDF EXTRACTION TH√îNG TH∆Ø·ªúNG")
    print("-" * 50)
    
    standard_result = extract_pdf_content_standard(pdf_file)
    
    if standard_result['success'] and standard_result['total_chars'] > 100:
        print(f"‚úÖ PDF extraction th√†nh c√¥ng: {standard_result['total_chars']:,} k√Ω t·ª±")
        
        # Chu·∫©n h√≥a text
        normalized_text = normalize_text(standard_result['total_text'])
        
        # T·∫°o b√°o c√°o v√† l∆∞u file
        report = format_extraction_report(standard_result, normalized_text)
        
        # L∆∞u file txt g·ªëc
        save_to_txt_file(
            standard_result['total_text'],
            "pdf_content_standard.txt",
            output_dir
        )
        
        # L∆∞u file txt ƒë√£ chu·∫©n h√≥a
        save_to_txt_file(
            normalized_text,
            "pdf_content_standard_normalized.txt",
            output_dir
        )
        
        # L∆∞u b√°o c√°o
        save_to_txt_file(
            report,
            "pdf_extraction_report_standard.txt",
            output_dir
        )
        
    else:
        print(f"‚ö†Ô∏è PDF extraction √≠t n·ªôi dung: {standard_result['total_chars']} k√Ω t·ª±")
        print("   ‚Üí Chuy·ªÉn sang OCR...")
        
        # Test 2: OCR extraction
        print("\nüîÑ TEST 2: OCR EXTRACTION")
        print("-" * 50)
        
        ocr_result = extract_pdf_content_ocr(pdf_file)
        
        if ocr_result['success']:
            print(f"‚úÖ OCR extraction th√†nh c√¥ng: {ocr_result['total_chars']:,} k√Ω t·ª±")
            
            # Chu·∫©n h√≥a text
            normalized_text = normalize_text(ocr_result['total_text'])
            
            # T·∫°o b√°o c√°o v√† l∆∞u file
            report = format_extraction_report(ocr_result, normalized_text)
            
            # L∆∞u file txt g·ªëc
            save_to_txt_file(
                ocr_result['total_text'],
                "pdf_content_ocr.txt",
                output_dir
            )
            
            # L∆∞u file txt ƒë√£ chu·∫©n h√≥a
            save_to_txt_file(
                normalized_text,
                "pdf_content_ocr_normalized.txt",
                output_dir
            )
            
            # L∆∞u b√°o c√°o
            save_to_txt_file(
                report,
                "pdf_extraction_report_ocr.txt",
                output_dir
            )
            
        else:
            print(f"‚ùå OCR extraction th·∫•t b·∫°i: {ocr_result.get('error', 'Unknown error')}")
    
    print("\nüéâ HO√ÄN TH√ÄNH!")
    print(f"üìÅ Ki·ªÉm tra c√°c file output trong: {output_dir}")

if __name__ == "__main__":
    main()